/* The following code was generated by JFlex 1.4.1 on 03/07/13 15:12 */

/*
 * Generated on 7/3/13 3:12 PM
 */
package syntax;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class SparqlTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\31\1\15"+
    "\1\20\1\1\1\31\1\31\1\7\2\32\1\31\1\27\1\31\1\27"+
    "\1\25\1\33\1\4\3\16\4\6\2\3\1\45\1\31\1\22\1\31"+
    "\1\23\1\31\1\20\1\47\1\50\1\5\1\52\1\26\1\41\1\60"+
    "\1\34\1\43\2\1\1\44\1\57\1\53\1\56\1\37\1\1\1\55"+
    "\1\40\1\35\1\12\1\1\1\46\1\24\1\51\1\1\1\32\1\11"+
    "\1\32\1\17\1\2\1\0\1\47\1\14\1\5\1\52\1\26\1\42"+
    "\1\60\1\61\1\43\2\1\1\44\1\57\1\54\1\56\1\37\1\1"+
    "\1\13\1\40\1\36\1\12\1\1\1\62\1\24\1\51\1\1\1\30"+
    "\1\17\1\30\1\31\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\1\3\1\4\3\1\1\5\1\6"+
    "\1\7\1\1\1\10\4\1\1\11\2\1\1\12\1\13"+
    "\1\14\6\12\1\0\1\15\1\0\2\15\1\3\1\16"+
    "\1\0\1\3\2\1\1\11\2\5\1\17\1\20\11\1"+
    "\3\12\2\0\1\12\3\0\1\20\1\0\1\21\1\3"+
    "\1\22\2\3\1\16\1\3\2\1\1\5\1\23\1\5"+
    "\11\1\3\12\2\0\1\12\3\0\1\3\2\1\1\5"+
    "\7\1\2\12\1\0\1\12\1\24\2\0\1\3\1\25"+
    "\1\5\5\1\1\12\3\0\1\3\1\5\1\26\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\146"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\146\0\u0264\0\146"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\146\0\146\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u0264\0\u05c7\0\u05fa\0\u062d\0\146\0\u0660"+
    "\0\u0693\0\u06c6\0\u06f9\0\231\0\u072c\0\u075f\0\146\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u05fa\0\u0bc1\0\146\0\u0bf4"+
    "\0\u0c27\0\u0660\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\146\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\231\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u13ec\0\u1650"+
    "\0\u1683\0\u16b6\0\231\0\u16e9\0\u171c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\5\2\3\1\15"+
    "\1\16\1\3\1\4\1\17\1\4\1\3\1\20\1\3"+
    "\1\20\1\3\3\4\1\21\1\22\2\23\2\4\1\3"+
    "\1\24\1\25\1\13\1\4\1\26\2\4\1\12\1\27"+
    "\3\4\1\24\10\30\1\31\12\30\1\32\10\30\1\33"+
    "\4\30\1\34\1\35\3\30\1\36\12\30\1\37\1\40"+
    "\64\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\11\4\1\0\15\4\3\42"+
    "\2\5\1\42\1\5\2\0\4\42\1\0\1\5\1\0"+
    "\1\42\3\0\1\42\1\43\1\44\5\0\11\42\1\0"+
    "\20\42\2\5\1\42\1\5\2\0\4\42\1\0\1\5"+
    "\1\0\1\42\3\0\1\45\1\43\1\44\5\0\11\42"+
    "\1\0\15\42\7\46\1\47\1\50\1\51\51\46\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\5\0\11\4\1\0\5\4\2\52\6\4"+
    "\1\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\53\5\0\11\4\1\0\15\4\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\5\0\11\4\1\0\3\4\1\54\11\4"+
    "\10\14\1\55\1\56\3\14\1\57\45\14\21\0\1\15"+
    "\44\0\2\60\1\0\1\60\7\0\1\60\45\0\6\4"+
    "\2\0\1\41\1\4\1\61\1\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\11\4\1\0\7\4\1\61"+
    "\5\4\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\62\5\0\11\4\1\0\15\4"+
    "\1\0\6\4\2\0\1\41\1\4\1\63\1\4\1\0"+
    "\1\4\5\0\1\4\1\0\1\4\5\0\7\4\1\64"+
    "\1\4\1\0\7\4\1\63\5\4\1\0\6\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\4\1\0\1\4"+
    "\5\0\1\65\10\4\1\0\13\4\1\65\1\4\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\5\0\4\4\1\54\4\4\1\0\15\4"+
    "\1\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\66\5\0\7\4\1\67\1\4\1\0"+
    "\15\4\1\0\6\4\2\0\1\41\1\4\1\70\1\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\5\0\3\4"+
    "\1\71\5\4\1\0\7\4\1\70\5\4\10\30\1\0"+
    "\12\30\1\0\16\30\1\0\16\30\2\0\10\30\1\0"+
    "\12\30\1\0\11\30\2\72\3\30\1\0\16\30\2\0"+
    "\10\30\1\0\12\30\1\0\11\30\2\73\3\30\1\0"+
    "\1\74\15\30\37\0\2\75\4\0\1\76\17\0\10\30"+
    "\1\0\12\30\1\0\16\30\1\0\3\30\1\77\12\30"+
    "\1\0\1\100\35\0\2\101\72\0\1\100\13\0\1\100"+
    "\12\0\1\102\50\0\7\42\2\0\4\42\1\0\1\42"+
    "\1\0\1\42\3\0\1\42\1\0\1\42\5\0\11\42"+
    "\1\0\20\42\2\103\1\42\1\103\2\0\4\42\1\0"+
    "\1\103\1\0\1\42\3\0\1\42\1\0\1\42\1\104"+
    "\4\0\11\42\1\0\20\42\4\105\2\0\3\42\1\105"+
    "\1\0\1\105\1\0\1\42\3\0\1\42\1\0\1\105"+
    "\5\0\5\42\2\105\2\42\1\0\1\42\2\105\1\42"+
    "\1\105\10\42\7\106\1\107\1\0\52\106\7\0\1\107"+
    "\53\0\4\106\1\110\1\106\1\111\1\112\1\0\1\46"+
    "\1\113\3\46\1\110\17\106\1\46\3\106\1\46\11\106"+
    "\1\46\6\106\1\0\6\4\2\0\1\41\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\1\4\5\0\7\4\1\114"+
    "\1\4\1\0\15\4\1\0\6\4\2\0\1\41\3\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\5\0\11\4"+
    "\1\0\12\4\1\115\2\4\11\55\1\116\3\55\1\117"+
    "\51\55\1\14\1\55\2\14\1\0\1\14\1\120\4\14"+
    "\17\55\1\14\3\55\1\14\11\55\1\14\6\55\3\42"+
    "\2\60\1\42\1\60\2\0\4\42\1\0\1\60\1\0"+
    "\1\42\3\0\1\42\1\0\1\44\5\0\11\42\1\0"+
    "\15\42\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\121\5\0\11\4\1\0\15\4"+
    "\1\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\10\4\1\122\1\0\15\4"+
    "\1\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\11\4\1\0\10\4\1\123"+
    "\4\4\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\4\5\0\10\4\1\124\1\0"+
    "\15\4\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\125\5\0\11\4\1\0\15\4"+
    "\1\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\4\4\1\126\4\4\1\0"+
    "\15\4\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\4\5\0\4\4\1\127\4\4"+
    "\1\0\15\4\1\0\6\4\2\0\1\41\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\1\4\5\0\11\4\1\0"+
    "\4\4\1\130\10\4\1\0\6\4\2\0\1\41\3\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\5\0\1\4"+
    "\2\131\6\4\1\0\15\4\10\30\1\0\12\30\1\0"+
    "\11\30\2\132\3\30\1\0\16\30\2\0\10\30\1\0"+
    "\12\30\1\0\13\30\1\133\2\30\1\0\16\30\2\0"+
    "\10\30\1\0\12\30\1\0\16\30\1\0\1\30\1\134"+
    "\14\30\41\0\1\135\67\0\1\136\16\0\10\30\1\0"+
    "\12\30\1\0\16\30\1\0\3\30\1\137\12\30\1\0"+
    "\1\140\46\0\1\140\13\0\1\140\35\0\2\141\27\0"+
    "\4\142\5\0\1\142\1\0\1\142\7\0\1\142\12\0"+
    "\2\142\4\0\2\142\1\0\1\142\10\0\3\42\2\103"+
    "\1\42\1\103\2\0\4\42\1\0\1\103\1\0\1\42"+
    "\3\0\1\42\1\0\1\42\5\0\11\42\1\0\15\42"+
    "\3\0\2\103\1\0\1\103\7\0\1\103\44\0\7\106"+
    "\1\47\1\0\56\106\1\111\1\106\1\111\1\107\1\0"+
    "\5\106\1\111\50\106\1\46\1\106\1\46\1\107\1\0"+
    "\5\106\1\46\47\106\4\143\1\47\1\0\3\106\1\143"+
    "\1\106\1\143\7\106\1\143\12\106\2\143\4\106\2\143"+
    "\1\106\1\143\10\106\1\0\6\4\2\0\1\41\3\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\5\0\11\4"+
    "\1\0\10\4\1\144\4\4\1\0\6\4\2\0\1\41"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\1\145\5\0"+
    "\11\4\1\0\15\4\10\55\1\0\55\55\4\146\2\55"+
    "\1\116\2\55\1\146\1\117\1\146\7\55\1\146\12\55"+
    "\2\146\4\55\2\146\1\55\1\146\10\55\1\0\6\4"+
    "\2\0\1\41\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\1\4\5\0\5\4\2\147\2\4\1\0\15\4\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\150\5\0\11\4\1\0\15\4\1\0\6\4"+
    "\2\0\1\41\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\1\4\5\0\11\4\1\0\11\4\1\54\3\4\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\5\0\1\4\2\151\6\4\1\0\15\4"+
    "\1\0\6\4\2\0\1\41\1\4\1\152\1\4\1\0"+
    "\1\4\5\0\1\4\1\0\1\4\5\0\11\4\1\0"+
    "\7\4\1\152\5\4\1\0\4\4\1\54\1\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\4\1\0\1\4"+
    "\5\0\11\4\1\0\15\4\1\0\6\4\2\0\1\41"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\1\4\5\0"+
    "\1\4\2\153\6\4\1\0\15\4\1\0\6\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\4\1\0\1\154"+
    "\5\0\11\4\1\0\15\4\1\0\6\4\2\0\1\41"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\155\1\4\1\0\15\4\10\30\1\0\12\30"+
    "\1\0\13\30\1\156\2\30\1\0\16\30\2\0\10\30"+
    "\1\0\12\30\1\0\16\30\1\0\2\30\1\157\13\30"+
    "\2\0\10\30\1\0\12\30\1\0\2\30\1\133\13\30"+
    "\1\0\16\30\47\0\1\160\43\0\1\135\34\0\10\30"+
    "\1\0\12\30\1\0\1\30\1\161\14\30\1\0\16\30"+
    "\27\0\1\162\74\0\1\163\26\0\4\164\5\0\1\164"+
    "\1\0\1\164\7\0\1\164\12\0\2\164\4\0\2\164"+
    "\1\0\1\164\10\0\3\106\4\165\1\47\1\0\3\106"+
    "\1\165\1\106\1\165\7\106\1\165\12\106\2\165\4\106"+
    "\2\165\1\106\1\165\10\106\1\0\6\4\2\0\1\41"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\1\4\5\0"+
    "\11\4\1\0\5\4\2\54\6\4\1\0\6\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\166\1\0\1\4"+
    "\5\0\11\4\1\0\15\4\3\55\4\167\2\55\1\116"+
    "\2\55\1\167\1\117\1\167\7\55\1\167\12\55\2\167"+
    "\4\55\2\167\1\55\1\167\10\55\1\0\6\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\170\1\4\1\0\15\4\1\0\4\4"+
    "\1\171\1\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\11\4\1\0\15\4\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\172\5\0\11\4\1\0\15\4\1\0\6\4"+
    "\2\0\1\41\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\1\54\5\0\11\4\1\0\15\4\1\0\6\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\173\1\4\1\0\15\4\1\0\6\4"+
    "\2\0\1\41\1\4\1\54\1\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\11\4\1\0\7\4\1\54"+
    "\5\4\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\4\5\0\11\4\1\0\10\4"+
    "\1\174\4\4\10\30\1\0\12\30\1\0\14\30\1\133"+
    "\1\30\1\0\2\30\1\157\13\30\2\0\10\30\1\0"+
    "\12\30\1\0\7\30\1\175\6\30\1\0\16\30\35\0"+
    "\1\176\27\0\1\30\7\161\1\0\1\30\3\161\1\30"+
    "\1\161\1\30\1\161\2\30\1\0\4\161\1\30\11\161"+
    "\1\162\16\161\2\162\1\0\1\162\1\177\4\162\1\177"+
    "\2\0\3\162\1\0\1\162\1\0\1\177\3\0\1\162"+
    "\1\177\1\162\1\177\1\0\2\177\12\162\1\177\15\162"+
    "\40\0\1\135\4\0\1\160\20\0\4\200\5\0\1\200"+
    "\1\0\1\200\7\0\1\200\12\0\2\200\4\0\2\200"+
    "\1\0\1\200\10\0\3\106\4\201\1\47\1\0\3\106"+
    "\1\201\1\106\1\201\7\106\1\201\12\106\2\201\4\106"+
    "\2\201\1\106\1\201\10\106\3\55\4\202\2\55\1\116"+
    "\2\55\1\202\1\117\1\202\7\55\1\202\12\55\2\202"+
    "\4\55\2\202\1\55\1\202\10\55\1\0\6\4\2\0"+
    "\1\41\3\4\1\0\1\4\5\0\1\203\1\0\1\4"+
    "\5\0\11\4\1\0\15\4\1\0\6\4\2\0\1\41"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\1\4\5\0"+
    "\1\4\2\54\6\4\1\0\15\4\1\0\6\4\2\0"+
    "\1\41\1\4\1\166\1\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\5\0\11\4\1\0\7\4\1\166\5\4"+
    "\1\0\6\4\2\0\1\41\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\5\0\11\4\1\0\5\4\2\150"+
    "\6\4\1\0\6\4\2\0\1\41\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\4\5\0\11\4\1\0\5\4"+
    "\2\204\6\4\10\30\1\0\12\30\1\0\7\30\1\161"+
    "\6\30\1\0\16\30\35\0\1\162\32\0\4\4\5\0"+
    "\1\4\1\0\1\4\7\0\1\4\12\0\2\4\4\0"+
    "\2\4\1\0\1\4\10\0\3\106\4\46\1\47\1\0"+
    "\3\106\1\46\1\106\1\46\7\106\1\46\12\106\2\46"+
    "\4\106\2\46\1\106\1\46\10\106\3\55\4\14\2\55"+
    "\1\116\2\55\1\14\1\117\1\14\7\55\1\14\12\55"+
    "\2\14\4\55\2\14\1\55\1\14\10\55\1\0\6\4"+
    "\2\0\1\41\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\1\4\5\0\11\4\1\0\1\4\1\205\13\4\1\0"+
    "\6\4\2\0\1\41\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\5\0\10\4\1\54\1\0\15\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5967];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\5\1\1\11\1\1\1\11"+
    "\10\1\2\11\6\1\1\0\1\1\1\0\3\1\1\11"+
    "\1\0\6\1\1\11\15\1\2\0\1\1\3\0\1\1"+
    "\1\0\2\1\1\11\7\1\1\11\15\1\2\0\1\1"+
    "\3\0\15\1\1\0\2\1\2\0\11\1\3\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SparqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return null;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SparqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SparqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 18: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 24: break;
        case 12: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1-1, Token.COMMENT_MULTILINE);
          }
        case 25: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 27: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 28: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 29: break;
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 30: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 31: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 32: break;
        case 21: 
          { addToken(Token.FUNCTION);
          }
        case 33: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 34: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 35: break;
        case 14: 
          { addToken(Token.ERROR_CHAR);
          }
        case 36: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 37: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 38: break;
        case 22: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 39: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 7: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 42: break;
        case 10: 
          { 
          }
        case 43: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 134: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 135: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
